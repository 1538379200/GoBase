package main

import (
	"fmt"
	"os"
)

// fmt是go的格式化I/O，用于格式化输出

// Printf -- 格式化输出
// 占位符：
/*
普通占位：
%v			相当于打印值
%+v			打印结构体时，会显示字段名
%#v			对应值的GO语法表示
%T			相应值的类型
%%			百分号
%t			布尔值占位符

数字占位：
%b			二进制占位符
%c			相应值的Unicode码
%d			十进制占位符
%o			八进制占位符
%q			单引号围绕的字面值，由GO安全转义
%x			十六进制，字母为小写
%X			十六进制，字符为大写
%U			Unicode格式
%e			科学计数法
%E			科学计数法
%f			浮点数占位
%g			根据情况选择科学技术和普通形式
%G			同上

字符串占位：
%s			字符串占位
%10s		输出最小宽度为10，右对齐，为加-为左对齐
%.5s		输出最大宽度为5
%5.10s		输出最大宽度为10，最小为5
%5.3s		输出宽度5，大于宽度3的截断
%010s		如果宽度小于10，则前面补0
%q			双引号围绕的字符串由GO安全转义

指针占位：
%p			十六进制表示，前面带ox
%#p			不带前缀ox
*/
func main() {
	// Printf	格式化打印
	fmt.Printf("%010s", "12345") // 输出10宽度，不足补0
	fmt.Printf("%T\n", "12345")  // 打印其类型

	// Sprintf	可以格式化字符串并赋值给其他
	m := fmt.Sprintf("%s的年龄是%d", "小明", 15)
	fmt.Println(m)

	// Fprintf	格式化并写入
	n, err := fmt.Fprintf(os.Stdout, "%s", "输出信息\n")
	if err == nil {
		fmt.Printf("字符数%d", n)
	}
}
